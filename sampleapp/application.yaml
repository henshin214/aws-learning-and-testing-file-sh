AWSTemplateFormatVersion: 2010-09-09
Description: >-
  serverless-app
  **WARNING** You will be billed for the AWS resources created if you create a stack from this template.

  Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
  
  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  A copy of the License is located at
  
      https://www.apache.org/licenses/LICENSE-2.0
  
  or in the "license" file accompanying this file. This file is distributed 
  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either 
  express or implied. See the License for the specific language governing 
  permissions and limitations under the License.

Transform:
- AWS::Serverless-2016-10-31
Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 100
    Tracing: Active
    MemorySize: 128
    CodeUri: ./
    Environment:
      Variables:
        SAMPLE_TABLE: 'APISampleTable'
        SERVICE_NAME: item_service
        ENABLE_DEBUG: false
        # Enable usage of KeepAlive to reduce overhead of short-lived actions, like DynamoDB queries
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    Layers:                                                                                 # <----- ADD FOR LAMBDA INSIGHTS
      - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:21"
  Api:
    TracingEnabled: true
Parameters:
  S3Bucket:
    Type: String
    Default: cloudraiser-975050034348
Resources:
# API Gateway
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: UserAPI
      TracingEnabled: true

# Lambda Functions
  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/get-all-items.getAllItemsHandler
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 'APISampleTable'
        - CloudWatchPutMetricPolicy: {}
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /items
            Method: GET
            
  getByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/get-by-id.getByIdHandler
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        - CloudWatchPutMetricPolicy: {}
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /items/{id}
            Method: GET
            
  putItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/put-item.putItemHandler
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 'APISampleTable'
        - CloudWatchPutMetricPolicy: {}
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /items
            Method: POST

# DynamoDB Table            
  # SampleTable:
  #   Type: AWS::Serverless::SimpleTable
  #   Properties:
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: 10
  #     PrimaryKey:
  #       Name: id
  #       Type: String

# CloudWatch Logs - Log Groups
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: Api
    Properties:
      LogGroupName: !Sub /aws/apigateway/${Api}
      RetentionInDays: 7
  
  GetByIdLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: getByIdFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${getByIdFunction}
      RetentionInDays: 7

  GetAllItemsLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: getAllItemsFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${getAllItemsFunction}
      RetentionInDays: 7

  PutItemLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: putItemFunction
    Properties:
      LogGroupName: !Sub /aws/lambda/${putItemFunction}
      RetentionInDays: 7

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  PipelineArtifactStore:
    Description: "S3 artifact store of AWS CodePipeline"
    Value: !Ref S3Bucket

